snippet init_test
    import assert from 'power-assert';

    describe('${1:TARGET}', () => {
      ${2:TARGET}
    });

snippet describe
    describe('${1:TARGET}', () => {
      ${2:TARGET}
    });

snippet it
    it('${1:TARGET}', () => {
      ${2:TARGET}
    });

snippet dumpStore
    store.subscribe(() => console.log(store.getState()));

snippet webpack
    const path = require('path');

    const outputDir = path.join(__dirname, '${1:PATH}');
    const isProduction = process.env.NODE_ENV === 'production';

    module.exports = {
      entry: {
        ${2:NAME}: path.join(__dirname, '${3:PATH}'),
      },
      output: {
        path: outputDir,
        filename: '[name].bundle.js',
      },
      resolve: {
        extensions: ['.js', '.jsx'],
      },
      module: {
        rules: [
          {
            test: /\.jsx?/,
            use: 'babel-loader',
          },
        ],
      },
      devtool: isProduction ? 'source-map' : 'cheap-module-eval-source-map',
      externals: [
        {
          window: 'window',
          document: 'document',
        },
      ],
    };

snippet assertOk
    assert(${1:TARGET});

snippet assertEqual
    assert.strictEqual(${1:TARGET}, ${2:TARGET});

snippet assertDeep
    assert.deepStrictEqual(${1:TARGET}, ${2:TARGET});

snippet     assertThrow
    assert.throws(() => { ${1:TARGET} });

snippet reduxReducer
    export const ${1:TARGET} = (state = ${2:TARGET}, action) => {
      switch (action.type) {
        case ${3:TARGET}:
            ${4:TARGET}
        default:
          return state;
      }
    };
snippet actionType
    export const ${1:TARGET} = '$1';

snippet reduxContainer
    import React, { PropTypes } from 'react';
    import { connect } from 'react-redux';

    const ${1:TARGET} = (${2:TARGET}) => (
      ${3:TARGET}
    );

    $1.propTypes = {
    };

    const mapStateToProps = state => ({
    });

    const mapDispatchToProps = dispatch => ({
    });

    export default connect(mapStateToProps, mapDispatchToProps)($1);

snippet reduxComponent
    const ${1:TARGET} = (${2:TARGET}) => (
      ${3:TARGET}
    );

    $1.propTypes = {
    };

snippet reduxForm
    import React from 'react'
    import { Field, reduxForm } from 'redux-form'

    const ${1:TARGET} = (${2:TARGET}) => (
      ${3:TARGET}
    );

    $1.propTypes = {
    };

    export default reduxForm({
      form: '${4:TARGET}'
    })($1)

snippet formReducer
    import { reducer as formReducer } from 'redux-form';

snippet combineReducers
    import { combineReducers } from 'redux';

snippet ReactComponent
    class ${1:TARGET} extends React.Component {
      static propTypes = {
      }
      render() {
        return (
        );
      }
    }
snippet thunkTest
    import fetchMock from 'fetch-mock';
    import thunk from 'redux-thunk';
    import configMockStore from 'redux-mock-store';

    const middlewares = [thunk];
    const mockStore = configMockStore(middlewares);

snippet testComponent
    import React from 'react';
    import { shallow } from 'enzyme';

snippet reactLocalState
    constructor() {
      super();
    }
    state = {
      ${1:TARGET}: ${2:TARGET}
    }

snippet bindThis
    this.${1:FUNCTION_NAME} = this.$1.bind(this);

